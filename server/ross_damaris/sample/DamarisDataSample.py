# automatically generated by the FlatBuffers compiler, do not modify

# namespace: sample

import flatbuffers

class DamarisDataSample(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDamarisDataSample(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DamarisDataSample()
        x.Init(buf, n + offset)
        return x

    # DamarisDataSample
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DamarisDataSample
    def VirtualTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DamarisDataSample
    def RealTs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DamarisDataSample
    def LastGvt(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DamarisDataSample
    def Mode(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DamarisDataSample
    def PeData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .PEData import PEData
            obj = PEData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DamarisDataSample
    def PeDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DamarisDataSample
    def KpData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .KPData import KPData
            obj = KPData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DamarisDataSample
    def KpDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DamarisDataSample
    def LpData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .LPData import LPData
            obj = LPData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DamarisDataSample
    def LpDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DamarisDataSample
    def ModelData(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ModelLP import ModelLP
            obj = ModelLP()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DamarisDataSample
    def ModelDataLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

# /// next three used for internal info
    # DamarisDataSample
    def EntityId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # DamarisDataSample
    def EventId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return -1

    # DamarisDataSample
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

def DamarisDataSampleStart(builder): builder.StartObject(11)
def DamarisDataSampleAddVirtualTs(builder, virtualTs): builder.PrependFloat64Slot(0, virtualTs, 0.0)
def DamarisDataSampleAddRealTs(builder, realTs): builder.PrependFloat64Slot(1, realTs, 0.0)
def DamarisDataSampleAddLastGvt(builder, lastGvt): builder.PrependFloat64Slot(2, lastGvt, 0.0)
def DamarisDataSampleAddMode(builder, mode): builder.PrependInt32Slot(3, mode, 0)
def DamarisDataSampleAddPeData(builder, peData): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(peData), 0)
def DamarisDataSampleStartPeDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DamarisDataSampleAddKpData(builder, kpData): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(kpData), 0)
def DamarisDataSampleStartKpDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DamarisDataSampleAddLpData(builder, lpData): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(lpData), 0)
def DamarisDataSampleStartLpDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DamarisDataSampleAddModelData(builder, modelData): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(modelData), 0)
def DamarisDataSampleStartModelDataVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DamarisDataSampleAddEntityId(builder, entityId): builder.PrependInt32Slot(8, entityId, -1)
def DamarisDataSampleAddEventId(builder, eventId): builder.PrependInt32Slot(9, eventId, -1)
def DamarisDataSampleAddStatus(builder, status): builder.PrependInt32Slot(10, status, 0)
def DamarisDataSampleEnd(builder): return builder.EndObject()
