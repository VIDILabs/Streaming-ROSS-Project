# automatically generated by the FlatBuffers compiler, do not modify

# namespace: sample

import flatbuffers

class LPData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsLPData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = LPData()
        x.Init(buf, n + offset)
        return x

    # LPData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # LPData
    def Peid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LPData
    def Kpid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LPData
    def KpGid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LPData
    def Lpid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LPData
    def LpGid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # LPData
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .SimEngineMetrics import SimEngineMetrics
            obj = SimEngineMetrics()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def LPDataStart(builder): builder.StartObject(6)
def LPDataAddPeid(builder, peid): builder.PrependInt32Slot(0, peid, 0)
def LPDataAddKpid(builder, kpid): builder.PrependInt32Slot(1, kpid, 0)
def LPDataAddKpGid(builder, kpGid): builder.PrependInt32Slot(2, kpGid, 0)
def LPDataAddLpid(builder, lpid): builder.PrependInt32Slot(3, lpid, 0)
def LPDataAddLpGid(builder, lpGid): builder.PrependInt32Slot(4, lpGid, 0)
def LPDataAddData(builder, data): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def LPDataEnd(builder): return builder.EndObject()
