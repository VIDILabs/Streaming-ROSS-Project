# automatically generated by the FlatBuffers compiler, do not modify

# namespace: sample

import flatbuffers

class KPData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsKPData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = KPData()
        x.Init(buf, n + offset)
        return x

    # KPData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # KPData
    def Peid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # KPData
    def Kpid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # KPData
    def KpGid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # KPData
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .SimEngineMetrics import SimEngineMetrics
            obj = SimEngineMetrics()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def KPDataStart(builder): builder.StartObject(4)
def KPDataAddPeid(builder, peid): builder.PrependInt32Slot(0, peid, 0)
def KPDataAddKpid(builder, kpid): builder.PrependInt32Slot(1, kpid, 0)
def KPDataAddKpGid(builder, kpGid): builder.PrependInt32Slot(2, kpGid, 0)
def KPDataAddData(builder, data): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def KPDataEnd(builder): return builder.EndObject()
