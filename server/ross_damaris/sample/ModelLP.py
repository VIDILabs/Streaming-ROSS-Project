# automatically generated by the FlatBuffers compiler, do not modify

# namespace: sample

import flatbuffers

class ModelLP(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsModelLP(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ModelLP()
        x.Init(buf, n + offset)
        return x

    # ModelLP
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ModelLP
    def Lpid(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # ModelLP
    def Lptype(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ModelLP
    def Variables(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .ModelVariable import ModelVariable
            obj = ModelVariable()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ModelLP
    def VariablesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

def ModelLPStart(builder): builder.StartObject(3)
def ModelLPAddLpid(builder, lpid): builder.PrependInt32Slot(0, lpid, 0)
def ModelLPAddLptype(builder, lptype): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lptype), 0)
def ModelLPAddVariables(builder, variables): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(variables), 0)
def ModelLPStartVariablesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ModelLPEnd(builder): return builder.EndObject()
